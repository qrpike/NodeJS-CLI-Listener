// Generated by CoffeeScript 1.6.1
/*
	This is the CLI interface for your NodeJS apps
*/

var CLI, EventEmitter, modules,
  _this = this,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

EventEmitter = require('events').EventEmitter;

modules = {
  readline: require('readline'),
  async: require('async')
};

CLI = (function(_super) {

  __extends(CLI, _super);

  /*
  		Constructor function for CLI Object:
  		@param {String} interface The string you want the prompt to say:
  		@param {String} welcome The welcome message to say to the user
  		@param {Object} triggers A object of `trigger:action()`
  */


  function CLI(_interface, welcome, triggers) {
    var _this = this;
    this["interface"] = _interface != null ? _interface : 'my-app';
    this.welcome = welcome != null ? welcome : 'Welcome to CLI!';
    this.triggers = triggers != null ? triggers : {};
    this.clear = function() {
      return CLI.prototype.clear.apply(_this, arguments);
    };
    this.onLine = function(line) {
      return CLI.prototype.onLine.apply(_this, arguments);
    };
    this.resetInput = function() {
      return CLI.prototype.resetInput.apply(_this, arguments);
    };
    this.write = function(message, command) {
      return CLI.prototype.write.apply(_this, arguments);
    };
    this.listTriggers = function() {
      return CLI.prototype.listTriggers.apply(_this, arguments);
    };
    this.listenForTriggers = function(triggers) {
      if (triggers == null) {
        triggers = _this.triggers;
      }
      return CLI.prototype.listenForTriggers.apply(_this, arguments);
    };
    this.ask = function(questions, callback, tasks) {
      if (questions == null) {
        questions = {};
      }
      if (callback == null) {
        callback = null;
      }
      if (tasks == null) {
        tasks = {};
      }
      return CLI.prototype.ask.apply(_this, arguments);
    };
    this.clear();
    this.cli = modules.readline.createInterface(process.stdin, process.stdout, null);
    console.log(this.welcome);
    this.cli.setPrompt("" + this["interface"] + "> ");
    this.listenForTriggers();
    this.cli.on('line', this.onLine);
    this.resetInput();
    this.question = this.cli.question.bind(this.cli);
  }

  /*
  		Ask the Command line a question(s)
  		@param {Object} questions Object of questions and their text
  			eg: { 'username':'What is the username?' }
  */


  CLI.prototype.ask = function(questions, callback, tasks) {
    var key, value, _fn;
    if (questions == null) {
      questions = {};
    }
    if (callback == null) {
      callback = null;
    }
    if (tasks == null) {
      tasks = {};
    }
    _fn = function(key, value, question) {
      var _this = this;
      return tasks[key] = function(cb) {
        return question(value, function(r) {
          return cb(null, r);
        });
      };
    };
    for (key in questions) {
      value = questions[key];
      _fn(key, value, this.cli.question.bind(this.cli));
    }
    return modules.async.series(tasks, callback);
  };

  /*
  		Add events to list for
  		@param {Object} triggers Triggers to add the listeners for
  */


  CLI.prototype.listenForTriggers = function(triggers) {
    var action, trigger,
      _this = this;
    if (triggers == null) {
      triggers = this.triggers;
    }
    for (trigger in triggers) {
      action = triggers[trigger];
      this.on(trigger, action);
    }
    this.on('clear', function() {
      _this.clear();
      return _this.resetInput();
    });
    return this.on('help', function() {
      _this.listTriggers();
      return _this.resetInput();
    });
  };

  CLI.prototype.listTriggers = function() {
    var key, value, _ref, _results;
    console.log('Possible Commands: ');
    _ref = this.triggers;
    _results = [];
    for (key in _ref) {
      value = _ref[key];
      _results.push(console.log('', key));
    }
    return _results;
  };

  CLI.prototype.write = function(message, command) {
    return this.cli.write(message, command);
  };

  CLI.prototype.resetInput = function() {
    return this.cli.prompt();
  };

  /*
  		When we hit ENTER on the keyboard
  		@param {String} line Content of the line we jsut entered:
  */


  CLI.prototype.onLine = function(line) {
    line = line.trim();
    if (this.listeners(line).length > 0) {
      return this.emit(line, this.resetInput);
    } else {
      return this.cli.prompt();
    }
  };

  CLI.prototype.clear = function() {
    return process.stdout.write('\u001B[2J\u001B[0;0f');
  };

  return CLI;

})(EventEmitter);

module.exports = CLI;
